name: CI

on:
  push:
  pull_request:

jobs:
  api-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Compose env
        run: |
          cat > .env <<'ENV'
          OPENAI_API_KEY=unused
          QDRANT_URL=http://qdrant:6333
          NEXT_PUBLIC_API_BASE=http://localhost:8000
          # Azure fields not needed for current tests; add real ones later if you test /explain
          AZURE_OPENAI_ENDPOINT=https://example.openai.azure.com
          AZURE_OPENAI_API_KEY=dummy
          AZURE_OPENAI_API_VERSION=2024-10-21
          AZURE_OPENAI_CHAT_DEPLOYMENT=gpt-4o-mini
          AZURE_OPENAI_EMBED_DEPLOYMENT=text-embedding-3-small
          ENV

      - name: Build API & Qdrant
        run: docker compose build api qdrant

      - name: Start API & Qdrant
        run: docker compose up -d qdrant api

      # NEW: copy requirements-dev.txt and tests/ into the running API container
      - name: Copy test assets into API container
        run: |
          CID=$(docker compose ps -q api)
          docker cp requirements-dev.txt "$CID":/tmp/requirements-dev.txt
          docker cp tests "$CID":/app/tests

      # NEW: install dev deps (from /tmp) and run pytest with PYTHONPATH=/app/src
      - name: Run tests (robust)
        run: |
          docker compose exec -T api sh -lc '
            set -e
            export PYTHONPATH=/app/src:$PYTHONPATH
            python -m pip install --upgrade pip
            if [ -f /tmp/requirements-dev.txt ]; then
              pip install -r /tmp/requirements-dev.txt
            else
              echo "No /tmp/requirements-dev.txt; installing pytest+httpx directly"
              pip install pytest httpx
            fi
            pytest -q /app/tests
          '

      - name: Dump logs on failure
        if: failure()
        run: |
          echo "::group::API logs"
          docker compose logs api
          echo "::endgroup::"
          echo "::group::Qdrant logs"
          docker compose logs qdrant
          echo "::endgroup::"

      - name: Teardown
        if: always()
        run: docker compose down -v
